{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"list",
				"list-style\tproperty"
			],
			[
				"sel",
				"select2"
			],
			[
				"patron",
				"patron_id"
			],
			[
				"s",
				"select"
			],
			[
				"added",
				"added_patrons"
			],
			[
				"sele",
				"selected_existing_patrons"
			],
			[
				"json_",
				"json_encode"
			],
			[
				"modal",
				"modal_footer"
			],
			[
				"moda",
				"modal_footer_buttons"
			],
			[
				"addPatr",
				"addPatronModal"
			],
			[
				"bw",
				"border-width"
			],
			[
				"add",
				"added_patron_ids"
			],
			[
				"filled",
				"filled_inputs"
			],
			[
				"exising",
				"existing_patrons"
			],
			[
				"existing",
				"existing_patrons"
			],
			[
				"exi",
				"existing_patrons"
			],
			[
				"exisg",
				"existing_value"
			],
			[
				"cur",
				"currently_associated_existing_patrons"
			],
			[
				"cu",
				"currently_associated_existing_patrons"
			],
			[
				"patron_id",
				"patron_ids_in_select"
			],
			[
				"jq",
				"jq_object"
			],
			[
				"remove",
				"removeAttr"
			],
			[
				"sav",
				"save_button_state"
			],
			[
				"save",
				"save_button"
			],
			[
				"patrons",
				"patrons_in_select"
			],
			[
				"curre",
				"currently_associated_existing_patrons"
			],
			[
				"sa",
				"savePatrons"
			],
			[
				"addP",
				"addPatronModalBody"
			],
			[
				"err",
				"errors"
			],
			[
				"associated",
				"associated_patrons"
			],
			[
				"se",
				"selected"
			],
			[
				"selected",
				"selected_patrons"
			],
			[
				"asso",
				"associated_patrons"
			],
			[
				"ass",
				"associated_patrons"
			],
			[
				"reset",
				"reset_associate_patron_form"
			],
			[
				"patro",
				"patron_wells"
			],
			[
				"col",
				"col-xs-12"
			],
			[
				"form",
				"form-control"
			],
			[
				"first",
				"first_name"
			],
			[
				"flat",
				"flattened"
			],
			[
				"new",
				"new_patron"
			],
			[
				"repos",
				"repository-margin-top-1rem"
			],
			[
				"incident",
				"incident_id"
			],
			[
				"li",
				"line-height"
			],
			[
				"photo",
				"photo_count"
			],
			[
				"bg",
				"bg_color"
			],
			[
				"caug",
				"caught_up_ratio"
			],
			[
				"php",
				"phpmyadmin-repository"
			],
			[
				"top",
				"top-ten-2017"
			],
			[
				"user",
				"user_viewed"
			],
			[
				"text",
				"text-right"
			],
			[
				"divion",
				"division_users"
			],
			[
				"report",
				"report-item"
			],
			[
				"division",
				"division_users"
			],
			[
				"unview",
				"unviewed_incidents"
			],
			[
				"create",
				"created_at"
			],
			[
				"sup",
				"supervisor_role"
			],
			[
				"in",
				"incident"
			],
			[
				"unv",
				"unviewed_by"
			],
			[
				"hidden",
				"hidden-xs"
			],
			[
				"empty",
				"empty"
			],
			[
				"em",
				"empty\tDefines an empty statement"
			],
			[
				"users",
				"users_in_division"
			],
			[
				"incid",
				"incidentsViewed"
			],
			[
				"viewed",
				"viewed_after_cutoff"
			],
			[
				"view",
				"viewed_after_cutoff"
			],
			[
				"cutoff",
				"cutoff_date"
			],
			[
				"register",
				"RegisterController"
			],
			[
				"supervis",
				"supervisor_role"
			],
			[
				"suer",
				"supervisor_role"
			],
			[
				"incidents",
				"incidentsViewed"
			],
			[
				"current",
				"current_user_id"
			],
			[
				"test",
				"test_director"
			],
			[
				"test_",
				"test_user"
			],
			[
				"inc",
				"incident_user_email"
			],
			[
				"role",
				"role_count"
			],
			[
				"margin",
				"margin-bottom"
			],
			[
				"reposito",
				"repository-margin-bottom-1rem"
			],
			[
				"incidn",
				"incidents"
			],
			[
				"success",
				"success_message"
			],
			[
				"border",
				"border-top"
			],
			[
				"clla",
				"Collapsed"
			],
			[
				"colla",
				"Collapsed"
			],
			[
				"up",
				"update_query"
			],
			[
				"schedule",
				"schedule_array"
			],
			[
				"var",
				"var_dump"
			],
			[
				"dir",
				"dir_contents"
			],
			[
				"spec",
				"specific_schedule"
			],
			[
				"mysql",
				"mysql_fetch_array"
			],
			[
				"emp",
				"emp_id"
			],
			[
				"mysqli_re",
				"mysqli_real_escape_string"
			],
			[
				"remember",
				"remember_me"
			],
			[
				"font",
				"font-weight"
			],
			[
				"mar",
				"margin-bottom"
			],
			[
				"remem",
				"remember_digest"
			],
			[
				"logut",
				"logout_path"
			],
			[
				"curr",
				"current_user"
			],
			[
				"re",
				"remember_token"
			],
			[
				"rem",
				"remember_digest"
			],
			[
				"assert",
				"assert_select"
			],
			[
				"follow",
				"follow_redirect"
			],
			[
				"E",
				"ENV"
			],
			[
				"threads",
				"threads_count"
			],
			[
				"message",
				"message_type"
			],
			[
				"password",
				"password_confirmation"
			],
			[
				"grav",
				"gravatar_url"
			],
			[
				"grava",
				"gravatar_id"
			],
			[
				"list-s",
				"list-style-type"
			],
			[
				"back",
				"background-color"
			],
			[
				"invalid",
				"invalid_address"
			],
			[
				"invali",
				"invalid_addresses"
			],
			[
				"gray",
				"gray-medium-light"
			],
			[
				"padding",
				"padding-top"
			],
			[
				"paddin",
				"padding-top"
			],
			[
				"preg_mat",
				"preg_match_all"
			],
			[
				"mb_con",
				"mb_convert_encoding"
			],
			[
				"ctype",
				"ctype_alpha"
			],
			[
				"ctype_al",
				"ctype_alpha"
			],
			[
				"ctype_a",
				"ctype_alpha"
			],
			[
				"strto",
				"strtolower"
			],
			[
				"cl",
				"cleanedStr"
			],
			[
				"ctype_",
				"ctype_digit"
			],
			[
				"strsp",
				"str_split"
			],
			[
				"str_",
				"str_split"
			],
			[
				"msg",
				"msgNoPunc"
			],
			[
				"preg",
				"preg_replace"
			],
			[
				"isn",
				"is_null"
			],
			[
				"str",
				"strtolower"
			]
		]
	},
	"buffers":
	[
		{
			"file": "resources/views/incidents/edit.blade.php",
			"settings":
			{
				"buffer_size": 3628,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php\n\nnamespace App\\Http\\Controllers;\n\nuse Illuminate\\Http\\Request;\nuse Illuminate\\Support\\Facades\\Hash;\nuse App\\Incident;\nuse App\\Photo;\nuse App\\User;\nuse App\\Location;\nuse App\\Patron;\nuse Mail;\nuse App\\Mail\\IncidentCreated;\nuse App\\Mail\\IncidentUpdated;\nuse Auth;\nuse Session;\n\nclass IncidentController extends Controller\n{\n    // ensure user is authenticated in order to use this controller\n    public function __construct() {\n        $this->middleware('auth');\n    }\n\n    \n    public function index() {\n        // set up the breadcrumbs for this action\n        $breadcrumbs = [\n            ['link' => route('home'), 'text' => 'Home'],\n            ['link' => route('incidents'), 'text' => 'Incidents'],\n        ];\n\n        // retrieve the incidents which the user has already viewed\n        $user_viewed = Auth::user()->incidentsViewed;\n\n        // retrieve all the incidents by date, then time\n    \t$incidents = Incident::orderBy('date', 'desc')->orderBy('created_at', 'desc')->get();\n    \treturn view('incidents.index', compact('incidents', 'user_viewed', 'breadcrumbs'));\n    }\n\n\n    public function show(Incident $incident) {\n        // set up the breadcrumbs for this action\n        $breadcrumbs = [\n            ['link' => route('home'), 'text' => 'Home'],\n            ['link' => route('incidents'), 'text' => 'Incidents'],\n            ['link' => route('incident', ['incident' => $incident->id]), 'text' => $incident->title]\n        ];\n\n        // load the comments for the incident\n        $comments = $incident->comment;\n\n        // load the photos for the incident\n        $photos = $incident->photo;\n\n        // record that the user viewed this incident\n        $user = Auth::user();\n        if (!$user->incidentsViewed->contains($incident)) {\n            Auth::user()->incidentsViewed()->save($incident);\n        }\n\n        // load the users who haven't viewed the incident\n        $unviewed_by = collect([]);\n        foreach ($incident->unviewedBy() as $user) {\n            foreach ($user->divisions as $division) {\n                if (Auth::user()->divisions->contains($division)) {\n                    if (!$unviewed_by->contains($user)) {\n                        $unviewed_by->push($user);\n                    }\n                }\n            }\n        }\n\n    \treturn view('incidents.show', compact('incident', 'comments', 'photos', 'unviewed_by', 'breadcrumbs'));\n    }\n\n\n    public function create() {\n        // set up the breadcrumbs for this action\n        $breadcrumbs = [\n            ['link' => route('home'), 'text' => 'Home'],\n            ['link' => route('incidents'), 'text' => 'Incidents'],\n            ['link' => route('createIncident'), 'text' => 'Report an Incident'],\n        ];\n\n        // collect all the locations\n        $locations = Location::orderBy('location', 'ASC')->pluck('location', 'id');\n\n        // collect all the staff\n        $staff = User::orderBy('name', 'ASC')->pluck('name', 'id');\n\n        // collect all the patrons\n        $patrons = Patron::all();\n\n        // reform the patron collection to work with the view's select element\n        $patrons = $patrons->sortBy('last_name')->mapWithKeys(function ($patron) {\n            $patron->list_name = $patron->get_list_name();\n            return $patron->list_name ? [$patron['id'] => $patron['list_name']] : [];\n        });\n\n    \treturn view('incidents.create', compact('breadcrumbs', 'locations', 'staff', 'patrons'));\n    }\n\n\n    public function store(Request $request) {\n        // validate the request input\n        $rules = [\n            'date' => 'required',\n            'time' => 'required',\n            'title' => 'required',\n            'description' => 'required',\n            'user' => 'required',\n            'locations' => 'required',\n        ];\n\n        $this->validate($request, $rules);\n        // dd($request);\n\n        // store it in a new instance of Incident\n        $incident = new Incident;\n        $incident->date = $request->date;\n        $incident->time = $request->time;\n        $incident->title = $request->title;\n        $incident->description = $request->description;\n        $incident->user_id = $request->user;\n\n\n        // save it to the database, which will give it an id,\n        // which is needed for relationships to be created\n        if ($incident->save()) {\n\n            // set the location(s) of the incident\n            foreach ($request->locations as $location_id) {\n                $incident->location()->save(Location::find($location_id));\n            }\n\n            // set the users (employees) involved in the incident\n            if (isset($request->usersInvolved)) {\n                foreach ($request->usersInvolved as $user_id) {\n                    $incident->usersInvolved()->save(User::find($user_id));\n                }\n            }\n\n            // set the patron(s) involved in the incident, if any\n            if (isset($request->patrons)) {\n                foreach ($request->patrons as $patron) {\n                    $incident->patron()->attach($patron);\n                }\n            }\n\n            // set the photos associated with the incident, if any\n            if (isset($request->photos)) {\n                foreach ($request->photos as $photo_id) {\n                    $photo = Photo::find(intval($photo_id));\n                    if ($photo) {\n                        $incident->photo()->save($photo);\n                    }\n                }\n            }\n\n            // email a notification to all staff\n            foreach (User::pluck('email') as $email) {\n                \\Mail::to($email)->send(new IncidentCreated($incident));\n            }\n\n            // redirect back the new incident with a success message\n            Session::flash('success_message', \"The incident was saved and an email notification was sent to the library staff.\");\n            return redirect()->route('incident', ['incident' => $incident->id]);\n        }\n    }\n\n\n    public function edit(Incident $incident) {\n        // set up the breadcrumbs for this action\n        $breadcrumbs = [\n            ['link' => route('home'), 'text' => 'Home'],\n            ['link' => route('incidents'), 'text' => 'Incidents'],\n            ['link' => route('incident', ['incident' => $incident->id]), 'text' => $incident->title],\n        ];\n\n        // make sure the user has permission to edit the incident\n        if (Auth::id() == $incident->user_id || Auth::user()->role->contains('role', 'Admin'))\n        {\n            // collect the photos associated with this incident\n            $photos = $incident->photo;\n\n            // collect the locations\n            $locations = Location::orderBy('location', 'ASC')->pluck('location', 'id');\n\n            // collect all the staff member\n            $staff = User::orderBy('name', 'ASC')->pluck('name', 'id');\n\n            // collect the patrons associated with this incident\n            $patrons = Patron::all();\n            foreach ($patrons as $patron) {\n                $patron->list_name = $patron->get_list_name();\n            }\n            $patrons = $patrons->pluck('list_name', 'id')->sort();\n\n            return view('incidents.edit', compact('incident', 'patrons', 'photos', 'locations', 'staff', 'breadcrumbs'));\n        }\n\n        // return to the incident with an error message\n        $errors = ['Permission Denied' => 'Only ' .\n                                          Auth::user()->find($incident->user_id)->name .\n                                          ' or a supervisor can modify this incident. You may comment below.'];\n\n        return view('incidents.show', compact('incident', 'errors', 'breadcrumbs'));\n    }\n\n\n    public function update(Request $request) {\n        // validate the form\n        $rules = [\n            'date' => 'required',\n            'title' => 'required',\n            'description' => 'required',\n            'user' => 'required',\n            'locations' => 'required',\n        ];\n        $this->validate($request, $rules);\n\n        // retrieve the incident from the database\n        $incident = Incident::find($request->incident);\n\n        // retrive the parts of the request we need for the incident\n        $updates = $request->only(\n            'date',\n            'time',\n            'locations',\n            'staffInvolved',\n            'patronsInvolved',\n            'photos',\n            'title',\n            'description'\n        );\n        \n        // set each attribute and save to the database\n        foreach ($updates as $key => $value) {\n            switch ($key) {\n                case 'locations':\n                    $incident->location()->sync($updates['locations']);\n                    break;\n                case 'staffInvolved':\n                    $incident->usersInvolved()->sync($updates['staffInvolved']);\n                    break;\n                default:\n                    $incident->$key = $value;\n                    break;                \n            }  \n        }\n\n        // record the user who performed the update\n        $incident->updated_by = Auth::user()->id;\n\n        // save the updates to the database\n        $incident->save();\n\n        // email a notification to the incident creator if someone else modified the incident\n        if ($request->user != $incident->user_id) {\n            Mail::to($incident->user->email)\n                  ->send(new IncidentUpdated($incident));\n        }\n\n        Session::flash('success_message', \"Incident Updated - \\\"$incident->title\\\"\");\n        return redirect()->route('incident', ['incident' => $incident->id]);\n    }\n\n\n    public function search(Request $request) {\n        // validate the form\n        $this->validate($request, ['search' => 'required']);\n\n        // search the database\n        $incidents = Incident::where('description',   'LIKE', '%' . $request->search . '%')->\n                               orWhere('patron_name', 'LIKE', '%' . $request->search . '%')->\n                               orWhere('title',       'LIKE', '%' . $request->search . '%')->\n                               orWhereHas('comment', function ($query) use ($request) {\n                                   $query->where('comment', 'LIKE', '%' . $request->search . '%');\n                               })->get();\n\n        // store the search string to pass back to the view\n        $search = $request->search;\n\n        // retrieve the incidents which the user has already viewed\n        $user_viewed = Auth::user()->incidentsViewed;\n\n        // provide the index view with the search results and search string\n        return view('incidents.index', compact('incidents', 'search', 'user_viewed'));\n    }\n\n    public function syncPatron(Request $request, $incident_id) {\n        // validate the form\n        $this->validate($request, ['patron' => 'required|numeric']);\n\n        $patron_id = $request->patron;\n\n        // check if existing or new patron\n        if ($patron_id) {\n            return Incident::find($incident_id)->patron()->attach(Patron::find($patron_id));\n        }\n\n        // pass the request on to the patron controller create() method\n        return redirect()->route('patron', ['incident' => $incident_id]);\n    }\n}\n",
			"file": "app/Http/Controllers/IncidentController.php",
			"file_size": 11174,
			"file_write_time": 131755634143486737,
			"settings":
			{
				"buffer_size": 11139,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "app/Incident.php",
			"settings":
			{
				"buffer_size": 1286,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 185.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"inst",
				"Package Control: Install Package"
			],
			[
				"ui",
				"UI: Select Color Scheme"
			],
			[
				"instll",
				"Package Control: Install Package"
			],
			[
				"theme",
				"UI: Select Theme"
			],
			[
				"them",
				"UI: Select Theme"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"instal",
				"Package Control: Install Package"
			],
			[
				"brow",
				"Preferences: Browse Packages"
			],
			[
				"matching",
				"Emmet: Go to Matching Pair"
			],
			[
				"in",
				"Package Control: Install Package"
			],
			[
				"color",
				"Color Helper: Show Color Picker"
			],
			[
				"laravel",
				"Set Syntax: Laravel Blade"
			],
			[
				"la",
				"Set Syntax: Laravel Blade"
			],
			[
				"pack",
				"Package Control: Install Package"
			],
			[
				"blade",
				"Set Syntax: Laravel Blade"
			],
			[
				"active",
				"Material Theme: Activate theme"
			],
			[
				"mat",
				"Material Theme: Activate theme"
			],
			[
				"material",
				"Material Theme: Activate theme"
			],
			[
				"git",
				"Preferences: GitGutter Settings"
			],
			[
				"hyp",
				"HypnotoadSVN: Side Bar - Default"
			],
			[
				"pa",
				"Package Control: Install Package"
			],
			[
				"ter",
				"Terminal: Open"
			],
			[
				"mark",
				"Build With: Markdown"
			]
		],
		"width": 428.0
	},
	"console":
	{
		"height": 126.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = 'df21e130d211cfc94d9b0905775a7c0f' + '1e3d39e33b79698005270310898eea76'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/Users/kevin/Sites/hub",
		"/Users/kevin/Sites/hub/config",
		"/Users/kevin/Sites/hub/public",
		"/Users/kevin/Sites/hub/public/images",
		"/Users/kevin/Sites/hub/storage",
		"/Users/kevin/Sites/hub/storage/app",
		"/Users/kevin/Sites/hub/storage/app/public",
		"/Users/kevin/Sites/hub/storage/app/public/photos"
	],
	"file_history":
	[
		"/Users/kevin/Sites/hub/app/Patron.php",
		"/Users/kevin/Sites/hub/storage/framework/views/2921d9363bc0be37395eda304f5a7a431e937f7b.php",
		"/Users/kevin/Sites/hub/public/js/hub.js",
		"/Users/kevin/Sites/hub/public/js/app.js",
		"/Users/kevin/Sites/hub/app/Http/Controllers/PatronController.php",
		"/Users/kevin/Sites/hub/routes/web.php",
		"/Users/kevin/Sites/hub/resources/views/incidents/index.blade.php",
		"/Users/kevin/Sites/hub/public/css/hub.css",
		"/Users/kevin/Sites/hub/resources/views/incidents/show.blade.php",
		"/Users/kevin/Sites/hub/storage/app/public/photos/13d1eb6b41b6c57e6155cffb14ea9192.jpg",
		"/Users/kevin/Sites/hub/config/filesystems.php",
		"/Users/kevin/Sites/hub/app/Http/Controllers/PhotoController.php",
		"/Users/kevin/Sites/hub/database/factories/PhotoFactory.php",
		"/Users/kevin/Sites/hub/database/seeds/DatabaseSeeder.php",
		"/Users/kevin/Sites/hub/storage/framework/views/08012e73876b6c5fd51775885c3f93c7a98a3108.php",
		"/Users/kevin/Sites/hub/app/Http/Controllers/IncidentController.php",
		"/Users/kevin/Sites/hub/resources/views/incidents/create.blade.php",
		"/Users/kevin/Sites/hub/public/index.php",
		"/Users/kevin/Sites/hub/app/User.php",
		"/Users/kevin/Sites/hub/app/Incident.php",
		"/Users/kevin/Sites/hub/app/Comment.php",
		"/Users/kevin/Sites/hub/app/Photo.php",
		"/Users/kevin/Sites/hub/database/migrations/2018_07_06_170648_create_incident_photo_table.php",
		"/Users/kevin/Sites/hub/resources/views/home.blade.php",
		"/Users/kevin/Sites/hub/resources/views/layouts/app.blade.php",
		"/Users/kevin/Sites/hub/.gitignore",
		"/Users/kevin/Sites/hub/config/mail.php",
		"/Users/kevin/Sites/hub/.env",
		"/Users/kevin/Sites/hub/resources/views/patrons/create.blade.php",
		"/Users/kevin/Sites/hub/resources/views/photos/create.blade.php",
		"/Users/kevin/Sites/hub/app/Providers/AppServiceProvider.php",
		"/Users/kevin/Sites/hub/docker-compose.yml",
		"/Users/kevin/Sites/hub/public/css/repository.css",
		"/Users/kevin/Sites/hub/composer.json",
		"/Users/kevin/Sites/hub/storage/framework/views/1ab587a0bfec8f573c2290a7e5da4a782b4e3e63.php",
		"/Users/kevin/Sites/hub/database/migrations/2018_03_18_184747_create_patrons_table.php",
		"/Users/kevin/Sites/hub/database/factories/PatronFactory.php",
		"/Users/kevin/Sites/hub/app/Http/Controllers/CommentController.php",
		"/Users/kevin/Sites/hub/database/migrations/2017_06_27_204203_create_incidents_table.php",
		"/Users/kevin/Sites/hub/resources/views/comments/create.blade.php",
		"/Users/kevin/Sites/hub/vendor/symfony/routing/Route.php",
		"/Users/kevin/Sites/hub/vendor/laravel/framework/src/Illuminate/Auth/RequestGuard.php",
		"/Users/kevin/Sites/hub/database/factories/IncidentFactory.php",
		"/Users/kevin/Sites/hub/resources/views/photos/show.blade.php",
		"/Users/kevin/Sites/hub/storage/framework/views/7c8abf6ff685e57fdf4217b267d4b1cdc4d84180.php",
		"/Users/kevin/Sites/hub/database/migrations/2018_03_23_183249_create_incident_patron_table.php",
		"/Users/kevin/Sites/hub/database/migrations/2018_03_18_194313_create_patron_photo_table.php",
		"/Users/kevin/Sites/hub/database/migrations/2017_08_01_015214_create_photos_table.php",
		"/Users/kevin/Sites/hub/app/Division.php",
		"/Users/kevin/Sites/hub/database/factories/CommentFactory.php",
		"/Users/kevin/Sites/hub/database/migrations/2017_07_26_150924_create_comments_table.php",
		"/Users/kevin/Sites/hub/app/Http/Controllers/DashboardController.php",
		"/Users/kevin/Sites/hub/resources/views/reports/index.blade.php",
		"/Users/kevin/Sites/hub/resources/views/auth/login.blade.php",
		"/Users/kevin/Sites/hub/app/Http/Controllers/ReportController.php",
		"/Users/kevin/Sites/hub/public/css/app.css",
		"/Volumes/TravelStore/Sites/psaudio.com/wp-content/plugins/ps-find-dealer/dbcnx.php",
		"/Volumes/TravelStore/Sites/psaudio.com/wp-config.php",
		"/Volumes/TravelStore/Sites/psaudio.com/wp-content/themes/superstore_child/content-podcast.php",
		"/Volumes/TravelStore/Sites/psaudio.com/docker-compose.yml",
		"/Users/kevin/Sites/psaudio.com/docker-compose.yml",
		"/Volumes/TravelStore/Sites/psaudio.com/info.php",
		"/Volumes/Storage/SteamLibrary/steamapps/common/Borderlands 2/Borderlands2.app/Contents/GameData/WillowGame/Config/DefaultEngine.ini",
		"/Users/kevin/Sites/psaudio.com/.gitignore",
		"/Users/kevin/Sites/hub/database/migrations/2014_10_12_000000_create_users_table.php",
		"/Users/kevin/Downloads/id_ed25519.pub",
		"/private/var/folders/q3/xmsfh3wn4ksb8ls_xs314tbr0000gq/T/fz3temp-2/wp-config.php",
		"/Users/kevin/Sites/psaudio.com/docker/db/init/drop_tables.sql",
		"/Users/kevin/Sites/psaudio.com/wp-content/themes/superstore_child/functions.php",
		"/Users/kevin/Sites/psaudio.com/wp-content/themes/superstore_child/footer.php",
		"/Users/kevin/.ssh/bitbucket_rsa.pub",
		"/Volumes/Storage/psaudio.com/wp-content/plugins/issuem-issue-to-pdf/mpdf/patterns/de.php",
		"/Users/kevin/Sites/hub/config/app.php",
		"/Users/kevin/.bash_profile",
		"/Users/kevin/Sites/hub/.env.example",
		"/Users/kevin/Sites/hub/vendor/fzaninotto/faker/src/Faker/Provider/Image.php",
		"/etc/hosts",
		"/Users/kevin/.ssh/known_hosts",
		"/Users/kevin/Sites/hub/vendor/fzaninotto/faker/src/Faker/Provider/ro_MD/Text.php",
		"/Users/kevin/Sites/hub/config/database.php",
		"/Users/kevin/Sites/hub/artisan",
		"/Users/kevin/Sites/hub/Dockerfile",
		"/private/var/folders/q3/xmsfh3wn4ksb8ls_xs314tbr0000gq/T/fz3temp-2/cart.php",
		"/private/var/folders/q3/xmsfh3wn4ksb8ls_xs314tbr0000gq/T/fz3temp-2/admin-new-order.php",
		"/Library/Developer/CommandLineTools/SDKs/MacOSX.sdk/System/Library/Frameworks/Kernel.framework/Versions/A/Headers/IOKit/graphics/IOGraphicsTypes.h",
		"/System/Library/Frameworks/Ruby.framework/Versions/2.0/Headers/ruby/config.h",
		"/Users/kevin/Sites/psaudio.com/xmlrpc.php",
		"/Users/kevin/Sites/psaudio.com/wp-config-sample.php",
		"/Users/kevin/Sites/psaudio.com/phpinfo.php",
		"/Users/kevin/Sites/psaudio.com/wp-settings.php",
		"/Users/kevin/Sites/repository/resources/views/comments/index.blade.php",
		"/Users/kevin/Sites/repository/resources/views/layouts/breadcrumbs.blade.php",
		"/Users/kevin/Sites/repository/app/User.php",
		"/Users/kevin/Sites/repository/app/Providers/AppServiceProvider.php",
		"/Users/kevin/Sites/repository/resources/views/layouts/navigation.blade.php",
		"/Users/kevin/Sites/repository/app/Http/Middleware/AdminsOnly.php",
		"/Users/kevin/Sites/repository/storage/framework/views/3e7dc927c93447813fe0a219486561be5d417f7a.php",
		"/Users/kevin/Sites/repository/resources/views/layouts/app.blade.php",
		"/Users/kevin/Sites/repository/app/Http/Kernel.php",
		"/Users/kevin/Sites/repository/app/Http/Controllers/ReportController.php",
		"/Users/kevin/Sites/repository/app/Http/Controllers/IncidentController.php",
		"/Users/kevin/Sites/repository/resources/views/reports/index.blade.php",
		"/Users/kevin/Sites/repository/app/Http/Controllers/DashboardController.php",
		"/Users/kevin/Sites/repository/storage/framework/views/41475bf2c59e19fd6f1e266298f6a52cc4701cff.php",
		"/Users/kevin/Sites/repository/resources/views/incidents/index.blade.php",
		"/Users/kevin/Sites/repository/resources/views/incidents/show.blade.php",
		"/Users/kevin/Sites/repository/app/Http/Middleware/SupervisorsOnly.php",
		"/Users/kevin/Sites/repository/storage/framework/views/7c8abf6ff685e57fdf4217b267d4b1cdc4d84180.php",
		"/Users/kevin/Sites/repository/storage/framework/views/085550feb21499fa352c76785e10ac7175b201d2.php",
		"/Users/kevin/Sites/repository/routes/web.php",
		"/Users/kevin/Sites/repository/database/seeds/DatabaseSeeder.php",
		"/Users/kevin/Sites/repository/database/factories/UserFactory.php",
		"/Users/kevin/Sites/repository/database/migrations/2014_10_12_000000_create_users_table.php",
		"/Users/kevin/Sites/repository/app/Incident.php",
		"/Users/kevin/Sites/repository/resources/views/reports/incidents.blade.php",
		"/Users/kevin/Sites/repository/app/Mail/IncidentCreated.php",
		"/Users/kevin/Sites/repository/.env",
		"/Users/kevin/Sites/repository/.env.example",
		"/Users/kevin/Sites/repository/resources/views/auth/login.blade.php",
		"/Users/kevin/Sites/repository/resources/views/home.blade.php",
		"/Users/kevin/Sites/repository/app/Division.php",
		"/Users/kevin/Sites/repository/docker-compose.yml",
		"/Users/kevin/Sites/repository/php.ini",
		"/Users/kevin/Sites/repository/resources/views/dashboard.blade.php",
		"/Users/kevin/Sites/repository/app/Http/Controllers/Auth/ResetPasswordController.php",
		"/Users/kevin/Sites/repository/vendor/laravel/framework/src/Illuminate/Routing/Router.php",
		"/Users/kevin/Sites/repository/vendor/laravel/framework/src/Illuminate/Foundation/Auth/ResetsPasswords.php",
		"/Users/kevin/Sites/repository/vendor/laravel/framework/src/Illuminate/Foundation/Auth/SendsPasswordResetEmails.php"
	],
	"find":
	{
		"height": 33.0
	},
	"find_in_files":
	{
		"height": 158.0,
		"where_history":
		[
			"",
			"<selection>",
			"<open files>",
			"",
			"<current file>",
			"*/node_modules/*",
			"",
			"<current file>",
			""
		]
	},
	"find_state":
	{
		"case_sensitive": true,
		"find_history":
		[
			"select2",
			"patrons",
			"asset(",
			"store",
			"photo",
			"show",
			"associated",
			"photo",
			"group",
			"Name:\tsmtp.shopify.com\nAddress: ",
			"response()",
			"addPatronModal",
			"addPatron",
			"right:",
			"newPatronFormWrapper",
			"FormWrapper",
			"data-target",
			"add_patron_wells",
			"existing_value",
			"if",
			"check_input_form_for_changes",
			"patron_ids_in_select",
			"patrons_in_select",
			"currently_associated_patrons",
			"jq_object",
			"check_for_changes",
			"associate_patron_check",
			"toggle_disable",
			"#existing",
			"#newPatron",
			"#existingPatrons",
			"new jQ",
			"request",
			"new_patron",
			"max-height: 518px",
			"patrons_to_associate",
			"modal",
			"associatePatron",
			"Event",
			"Listeners",
			"row",
			"container",
			"cont",
			"container",
			"dd",
			"patrons",
			"$patrons_to_associate",
			"$new_patron",
			"function",
			"url",
			"error",
			"content",
			"patronJson",
			"existingPatrons",
			"createComment",
			"create(",
			"textarea",
			"input(",
			"location",
			"incident",
			"s",
			"incidentst",
			"\t\t\t\t\t\t\t@",
			"incidentst",
			"incidentPa",
			"patron name",
			"patron",
			"incident",
			"$incident->date",
			"get_name()",
			"patron",
			"photostable",
			"$patron->photos",
			"$photo->patrons",
			"$photo->patron",
			"$patron->photo",
			"$photo->incident",
			"patronstab",
			"photo of",
			"photo of ",
			"Comment",
			"comment",
			"caught_up_count"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"",
			"addPhoto",
			"addPatronFormWrapper",
			"patron_wells",
			"$patron->photo",
			"$photo->patron",
			"$photo->patrons",
			"$patron->photos",
			"patron"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 0,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "resources/views/incidents/edit.blade.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3628,
						"regions":
						{
						},
						"selection":
						[
							[
								2908,
								2908
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"syntax": "Packages/Laravel Blade Highlighter/blade.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1382.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "app/Http/Controllers/IncidentController.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 11139,
						"regions":
						{
						},
						"selection":
						[
							[
								8313,
								8313
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true
						},
						"translation.x": 0.0,
						"translation.y": 5109.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "app/Incident.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 1286,
						"regions":
						{
						},
						"selection":
						[
							[
								1283,
								1283
							]
						],
						"settings":
						{
							"git_gutter_is_enabled": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 242.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 33.0
	},
	"input":
	{
		"height": 69.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"output.markdown":
	{
		"height": 100.0
	},
	"output.mdpopups":
	{
		"height": 0.0
	},
	"output.unsaved_changes":
	{
		"height": 100.0
	},
	"pinned_build_system": "Packages/Markdown Preview/Markdown.sublime-build",
	"project": "hub.sublime-project",
	"replace":
	{
		"height": 62.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"patron",
				"app/Patron.php"
			],
			[
				"hub.js",
				"public/js/hub.js"
			],
			[
				"app.js",
				"public/js/app.js"
			],
			[
				"inciden",
				"app/Incident.php"
			],
			[
				"incident",
				"app/Http/Controllers/IncidentController.php"
			],
			[
				"patroncon",
				"app/Http/Controllers/PatronController.php"
			],
			[
				"incid/edit",
				"resources/views/incidents/edit.blade.php"
			],
			[
				"inci/ind",
				"resources/views/incidents/index.blade.php"
			],
			[
				"hub.css",
				"public/css/hub.css"
			],
			[
				"web.",
				"routes/web.php"
			],
			[
				"show",
				"resources/views/incidents/show.blade.php"
			],
			[
				"DatabaseSeeder.php",
				"database/seeds/DatabaseSeeder.php"
			],
			[
				"PhotoFactory.php",
				"database/factories/PhotoFactory.php"
			],
			[
				"photof",
				"database/factories/PhotoFactory.php"
			],
			[
				"database",
				"database/seeds/DatabaseSeeder.php"
			],
			[
				"file",
				"config/filesystems.php"
			],
			[
				"photocon",
				"app/Http/Controllers/PhotoController.php"
			],
			[
				"filesy",
				"config/filesystems.php"
			],
			[
				"incid/cre",
				"resources/views/incidents/create.blade.php"
			],
			[
				"inc/show",
				"resources/views/incidents/show.blade.php"
			],
			[
				"index",
				"public/index.php"
			],
			[
				"incidn",
				"app/Http/Controllers/IncidentController.php"
			],
			[
				"comment",
				"app/Comment.php"
			],
			[
				"inci",
				"app/Incident.php"
			],
			[
				"photo",
				"app/Photo.php"
			],
			[
				"Inciden",
				"app/Incident.php"
			],
			[
				".giti",
				".gitignore"
			],
			[
				"databas",
				"database/seeds/DatabaseSeeder.php"
			],
			[
				"photoc",
				"app/Http/Controllers/PhotoController.php"
			],
			[
				".env",
				".env"
			],
			[
				"mail.",
				"config/mail.php"
			],
			[
				"create.",
				"resources/views/incidents/create.blade.php"
			],
			[
				"create.bl",
				"resources/views/incidents/create.blade.php"
			],
			[
				".gitig",
				".gitignore"
			],
			[
				"databs",
				"database/seeds/DatabaseSeeder.php"
			],
			[
				"docker",
				"docker-compose.yml"
			],
			[
				"layout",
				"resources/views/layouts/app.blade.php"
			],
			[
				"web",
				"routes/web.php"
			],
			[
				"patron/c",
				"resources/views/patrons/create.blade.php"
			],
			[
				"patrons/cre",
				"resources/views/patrons/create.blade.php"
			],
			[
				"compo",
				"composer.json"
			],
			[
				"1ab587a0bfec8f573c2290a7e5da4a782b4e3e63",
				"storage/framework/views/1ab587a0bfec8f573c2290a7e5da4a782b4e3e63.php"
			],
			[
				"repo",
				"public/css/repository.css"
			],
			[
				"patronf",
				"database/factories/PatronFactory.php"
			],
			[
				"app.bla",
				"resources/views/layouts/app.blade.php"
			],
			[
				"commentc",
				"app/Http/Controllers/CommentController.php"
			],
			[
				"incide",
				"app/Incident.php"
			],
			[
				"patr",
				"app/Patron.php"
			],
			[
				"createpatrons",
				"database/migrations/2018_03_18_184747_create_patrons_table.php"
			],
			[
				"route",
				"vendor/symfony/routing/Route.php"
			],
			[
				"incidentc",
				"app/Http/Controllers/IncidentController.php"
			],
			[
				"incid",
				"app/Incident.php"
			],
			[
				"datasee",
				"database/seeds/DatabaseSeeder.php"
			],
			[
				"creaincid",
				"database/migrations/2017_06_27_204203_create_incidents_table.php"
			],
			[
				"inc/cre",
				"resources/views/incidents/create.blade.php"
			],
			[
				"incco",
				"app/Http/Controllers/IncidentController.php"
			],
			[
				"incidecont",
				"app/Http/Controllers/IncidentController.php"
			],
			[
				"incf",
				"database/factories/IncidentFactory.php"
			],
			[
				"repos",
				"public/css/repository.css"
			],
			[
				"photo/show",
				"resources/views/photos/show.blade.php"
			],
			[
				"createincid",
				"database/migrations/2017_06_27_204203_create_incidents_table.php"
			],
			[
				"7c8abf6ff685e57fdf4217b267d4b1cdc4d84180.",
				"storage/framework/views/7c8abf6ff685e57fdf4217b267d4b1cdc4d84180.php"
			],
			[
				"inc/sho",
				"resources/views/incidents/show.blade.php"
			],
			[
				"create_in",
				"database/migrations/2017_06_27_204203_create_incidents_table.php"
			],
			[
				"incidentf",
				"database/factories/IncidentFactory.php"
			],
			[
				"rep",
				"public/css/repository.css"
			],
			[
				"incid/ind",
				"resources/views/incidents/index.blade.php"
			],
			[
				"views/pho",
				"resources/views/photos/show.blade.php"
			],
			[
				"user",
				"app/User.php"
			],
			[
				"division",
				"app/Division.php"
			],
			[
				"blad.p",
				"resources/views/auth/login.blade.php"
			],
			[
				"reportc",
				"app/Http/Controllers/ReportController.php"
			],
			[
				"repo/",
				"resources/views/reports/incidents.blade.php"
			],
			[
				"app.css",
				"public/css/app.css"
			],
			[
				"seeder",
				"database/seeds/DatabaseSeeder.php"
			],
			[
				"appser",
				"app/Providers/AppServiceProvider.php"
			],
			[
				".git",
				".gitignore"
			],
			[
				"content-pod",
				"wp-content/themes/superstore_child/content-podcast.php"
			],
			[
				"dbcnx",
				"wp-content/plugins/ps-find-dealer/dbcnx.php"
			],
			[
				"apps",
				"app/Providers/AppServiceProvider.php"
			],
			[
				"reports/in",
				"resources/views/reports/incidents.blade.php"
			],
			[
				"dashboa",
				"app/Http/Controllers/DashboardController.php"
			],
			[
				"app/user",
				"app/User.php"
			],
			[
				"front-page",
				"wp-content/themes/superstore_child/front-page.php"
			],
			[
				"functions",
				"wp-content/themes/superstore_child/functions.php"
			],
			[
				"footer",
				"wp-content/themes/superstore_child/footer.php"
			],
			[
				"dashr",
				"app/Http/Controllers/DashboardController.php"
			],
			[
				"dashb",
				"app/Http/Controllers/DashboardController.php"
			],
			[
				"conf/app",
				"config/app.php"
			],
			[
				"data",
				"config/database.php"
			],
			[
				"dockerf",
				"Dockerfile"
			],
			[
				"docker-c",
				"docker-compose.yml"
			],
			[
				"setting",
				"app/Http/Controllers/SettingController.php"
			],
			[
				"pluggabl",
				"wp-includes/pluggable.php"
			],
			[
				"index.blade",
				"resources/views/incidents/index.blade.php"
			],
			[
				"index.",
				"resources/views/comments/index.blade.php"
			],
			[
				"brea",
				"resources/views/layouts/breadcrumbs.blade.php"
			],
			[
				"admin",
				"app/Http/Middleware/AdminsOnly.php"
			],
			[
				"appserv",
				"app/Providers/AppServiceProvider.php"
			],
			[
				"3e7dc927c93447813fe0a219486561be5d417f7a",
				"storage/framework/views/3e7dc927c93447813fe0a219486561be5d417f7a.php"
			],
			[
				"layouts.na",
				"resources/views/layouts/navigation.blade.php"
			],
			[
				"app.",
				"resources/views/layouts/app.blade.php"
			],
			[
				"app/http/",
				"app/Http/Kernel.php"
			],
			[
				"report",
				"app/Http/Controllers/ReportController.php"
			],
			[
				"41475bf2c59e19fd6f1e266298f6a52cc4701cff",
				"storage/framework/views/41475bf2c59e19fd6f1e266298f6a52cc4701cff.php"
			],
			[
				"dash",
				"app/Http/Controllers/DashboardController.php"
			],
			[
				"7c8abf6ff685e57fdf4217b267d4b1cdc4d84180",
				"storage/framework/views/7c8abf6ff685e57fdf4217b267d4b1cdc4d84180.php"
			],
			[
				"navigation",
				"resources/views/layouts/navigation.blade.php"
			],
			[
				"085550feb21499fa352c76785e10ac7175b201d2",
				"storage/framework/views/085550feb21499fa352c76785e10ac7175b201d2.php"
			],
			[
				"super",
				"app/Http/Middleware/SupervisorsOnly.php"
			],
			[
				"ind",
				"resources/views/reports/index.blade.php"
			],
			[
				"userf",
				"database/factories/UserFactory.php"
			],
			[
				"datab",
				"database/seeds/DatabaseSeeder.php"
			],
			[
				"create_users",
				"database/migrations/2014_10_12_000000_create_users_table.php"
			],
			[
				"app/http/k",
				"app/Http/Kernel.php"
			],
			[
				"app.bl",
				"resources/views/layouts/app.blade.php"
			],
			[
				"incidents",
				"resources/views/reports/incidents.blade.php"
			],
			[
				"41475bf2c59e19fd6f1e266298f6a52cc4701cff.php",
				"storage/framework/views/41475bf2c59e19fd6f1e266298f6a52cc4701cff.php"
			],
			[
				"home",
				"resources/views/home.blade.php"
			],
			[
				"",
				".env"
			],
			[
				"divisi",
				"app/Division.php"
			],
			[
				"service",
				"app/Providers/AppServiceProvider.php"
			],
			[
				"databases",
				"database/seeds/DatabaseSeeder.php"
			],
			[
				"navi",
				"resources/views/layouts/navigation.blade.php"
			],
			[
				"dashboar",
				"resources/views/dashboard.blade.php"
			],
			[
				"app/http/controllers/auth/resetpasswordcontroller.php",
				"app/Http/Controllers/Auth/ResetPasswordController.php"
			],
			[
				"na",
				"resources/views/layouts/navigation.blade.php"
			],
			[
				"sendspasswordresetemails",
				"vendor/laravel/framework/src/Illuminate/Foundation/Auth/SendsPasswordResetEmails.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"",
				"~/Sites/hub/database/seeds/pwt.sublime-workspace"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
		"xdebug":
		{
			"hide_conflict": false
		}
	},
	"show_minimap": true,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 223.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
